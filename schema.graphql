scalar Date

enum Fortnight {
  FIRST
  SECOND
}

interface Total {
  date: String!
  total: Float!
  month: String!
}

type PaymentDate {
  date: Date!
  fortnight: Fortnight!
}

type Income {
  id: ID!
  userId: String!
  total: Float!
  createdAt: Date
  comment: String
  paymentDate: PaymentDate!
  # Add a field for "safe to spend" and maybe one for "savings"
}

type TotalByMonth implements Total {
  date: String!
  total: Float!
  month: String!
}

type TotalByFortnight implements Total {
  date: String!
  month: String!
  fortnight: Fortnight!
  total: Float!
}

# Type used to display all the incomes registered and to obtain the total by month
# and total of all
type IncomesList {
  incomes: [Income!]!
  totalByMonth: [TotalByMonth!]!
  total: Float!
}

# TODO add query to return total of card expenses by fortnight
type Card {
  id: ID!
  userId: ID!
  alias: String
  bank: String!
  isDigital: Boolean
  isDebit: Boolean
}

type TotalByCardId {
  totalByMonth: [TotalByMonth]
  totalByFortnight: [TotalByFortnight]
}

type Expense {
  id: ID!
  userId: String
  concept: String!
  total: Float!
  payBefore: Date!
  createdAt: Date
  updatedAt: Date
  tags: [ExpenseTag!]!
  card: Card
  comment: String
}

# Rename to category
# A category is a percentage of the income to save or expend, and should be tied to a expense
#
type ExpenseTag {
  id: ID!
  name: String!
  createdAt: Date
  updatedAt: Date
}

type FinancialBalance {
  remaining: Float!
  debts: Float!
}

# Type used to display the income for a given fortnight and all the related expenses
# it also return the total of all the expenses and the remaining between income and expenses
type IncomesListAndExpenses {
  incomes: [Income!]
  expenses: [Expense!]
  incomesTotal: Float!
  expensesTotal: Float
  remaining: Float
}

input CreateExpenseInput {
  cardId: ID
  concept: String!
  total: Float!
  payBefore: Date!
  tags: [ExpenseTagInput!]!
  comment: String
}

input CreateCardInput {
  alias: String
  bank: String!
  isDigital: Boolean
  isDebit: Boolean
}

input PayBeforeInput {
  # input used to get all the expenses matching this date (from 1st to 15th or from 15th to 30th)
  payBefore: Date!
  cardId: ID
}

input ExpenseTagInput {
  name: String
}

type Query {
  incomesList: IncomesList
  incomesByMonth(date: Date!): [Income] # Validate if this query is necessary
  expensesByFortnight(input: PayBeforeInput!): [Expense] # Validate if this query is necessary
  expensesByMonth(input: PayBeforeInput!): [Expense]
  #TODO make this query to return the total of expenses
  incomesAndExpensesByFortnight(input: PayBeforeInput!): IncomesListAndExpenses!
  allExpenses: [Expense]
  financialBalanceByFortnight(input: PayBeforeInput!): FinancialBalance
  tags: [ExpenseTag]
  cardList: [Card]
  cardById(cardId: ID!): Card
  expensesTotalByCardId(cardId: ID!): TotalByCardId
}

type Mutation {
  createIncome(total: Float!, comment: String, paymentDate: Date!): Income!
  createExpense(input: CreateExpenseInput!): Expense
  createCard(input: CreateCardInput): Card
  deleteIncomeById(id: ID!): Boolean
}

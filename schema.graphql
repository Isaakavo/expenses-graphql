scalar Date

enum Fortnight {
  FIRST
  SECOND
}

type PaymentDate {
  date: Date!
  forthnight: Fortnight!
}

type Income {
  userId: String!
  total: Float!
  createdAt: Date
  # Make this an object?
  # paymentDate: { date, forthnight - values enum first, second }
  paymentDate: PaymentDate!
}

type IncomeTotalByMonth {
  date: String!,
  total: Float!
}

type Incomes {
  incomes: [Income]
  totalByMonth: [IncomeTotalByMonth]
  total: Float!
}

type Expense {
  id: ID!
  userId: String!
  concept: String!
  total: Float!
  payBefore: Date!
  createdAt: Date
  updatedAt: Date
  tags: [ExpenseTag]
  comment: String
}

type ExpenseTag {
  id: ID!
  name: String!
  createdAt: Date
  updatedAt: Date
}

type FinancialBalance {
  remaining: Float!
  debts: Float!
}

input ExpenseTagInput {
  name: String
}

type Query {
  incomes: Incomes
  incomesByMonth(date: Date!): [Income]
  expensesByFortnight(payBefore: Date!): [Expense]
  expensesByMonth(date: Date!): [Expense]
  allExpenses: [Expense]
  financialBalanceByFortnight(payBefore: Date!): FinancialBalance
  tags: [ExpenseTag]
}

type Mutation {
  createIncome(total: Float!, createdAt: Date!, paymentDate: Date!): Income
  createExpense(
    concept: String!
    total: Float!
    payBefore: Date!
    createdAt: Date!
    tags: [ExpenseTagInput]
    comment: String
  ): Expense
}

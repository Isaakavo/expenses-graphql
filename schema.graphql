scalar Date

enum Fortnight {
  FIRST
  SECOND
}

type PaymentDate {
  date: Date!
  fortnight: Fortnight!
}

type Income {
  id: ID!
  userId: String!
  total: Float!
  createdAt: Date
  comment: String
  # Make this an object?
  paymentDate: PaymentDate!
}

type IncomeTotalByMonth {
  date: String!
  total: Float!
}

# Type used to display all the incomes registered and to obtain the total by month
# and total of all
type IncomesList {
  incomes: [Income!]!
  totalByMonth: [IncomeTotalByMonth!]!
  total: Float!
}

type Expense {
  id: ID!
  incomeId: ID
  userId: String!
  concept: String!
  total: Float!
  payBefore: Date!
  createdAt: Date
  updatedAt: Date
  tags: [ExpenseTag]
  comment: String
}

type ExpenseTag {
  id: ID!
  name: String!
  createdAt: Date
  updatedAt: Date
}

type FinancialBalance {
  remaining: Float!
  debts: Float!
}

# Type used to display the income for a given fortnight and all the related expenses
# it also return the total of all the expenses
type IncomeListAndExpenses {
  income: Income!
  expenses: [Expense]
  expensesTotal: Float
}

input CreateExpenseInput {
  incomeId: ID!
  concept: String!
  total: Float!
  payBefore: Date!
  tags: [ExpenseTagInput]
  comment: String
}

input IncomesAndExpensesByFortnightInput {
  incomeId: ID!
  payBefore: Date!
}

input ExpenseTagInput {
  name: String
}

type Query {
  incomesList: IncomesList
  incomesByMonth(date: Date!): [Income] # Validate if this query is necessary
  expensesByFortnight(payBefore: Date!): [Expense] # Validate if this query is necessary
  expensesByMonth(date: Date!): [Expense]
  #TODO make this query to return the total of expenses
  incomeAndExpensesByFortnight(input: IncomesAndExpensesByFortnightInput!): IncomeListAndExpenses!
  allExpenses: [Expense]
  financialBalanceByFortnight(payBefore: Date!): FinancialBalance
  tags: [ExpenseTag]
}

type Mutation {
  createIncome(total: Float!, comment: String, paymentDate: Date!): Income!
  deleteIncomeById(id: ID!): Boolean
  createExpense(input: CreateExpenseInput!): Expense
}
